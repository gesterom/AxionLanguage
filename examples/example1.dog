#lol
## namespace = main
#         test     

#memorize = 10
function add
(a,b,c)

{
	a+b*c
}
// lol 
function add(a,b){
	a+b
}
type Person{
	let name : string;
	let age : int;
}

type vector( t : Type ){
	let size : int;
	let capasity : int;
	let data : t[];
}

procedure main(){
	printf("hell of the world");
	a == b;
	a = a >> b;
	b=c**-a;
	b or a;
	a+-c;
	a = 0.3;
	//a+-+-+-+-+-+-+-+-b;
	//a+-+-+-+-+-+-+-+-(b);
	//a+-+-+-+-+-(+-+-+-b);
}

procedure foo( /*ala ma kota*/){}

procedure bazz{/*}*/}
procedure bar//{
{
	task;
}

procedure main2() {
	/* comment */
	/* inside 1
		/* inside 2 */ {}
		}{
	*/
	// Variable declarations
	let a : int = 0;
	let b : float = 0;
	let c : bool = false;

	// Basic assignment and arithmetic operations
	a = 10;
	b = 3.14;
	c = a > b;

	// Logical operations
	if a == 10 && b < 5.0 and true or false : 
		printf("Condition met: a is 10 and b is less than 5.0");
	else printf("Condition not met");

	let oracleandhercules=15;
	// Compound assignment
	a += 5;
	b *= 2.0;
	c = (c or(a>b));

	// Complex expressions
	let result : float = (a + b) / 3.0;

	// Additional operators
	a <<= 2;
	a >>= 1; 
	c = !c;
	let d = a | b;

	// Printing results
	printf("a = %d, b = %.2f, c = %b, result = %.2f, d = %d", a, b, c, result, d);
}

procedure addToList(list : vector(int) , a : int){
	z = not x++ + y * 2 ** 3 ;
}

procedure addToList2(list : vector(int) , a : int){
	z = 2**3**4**5 ;
}

build all{
	compile(example1.dog)
	compile(example2.dog)
}